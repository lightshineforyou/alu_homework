`timescale 1ns / 1ps

module ALU_32bit (
    a,
    b,
    CI,
    F,
    dir,
    bite,
    S,
    CO
);
  input [31:0] a;
  input [31:0] b;  ///加法使用
  input CI;
  input [3:0] F;  ///根据不同的始能信号来判断功能
  input [1:0] dir;  ///移位方向确定
  input [4:0] bite;  ///移位位数确定

  output [31:0] S;  ///输出
  output CO;
  ////译码器a
  wire [15:0] y;  ////3输入八输出判断功能
  Decoder_4To16 d1 (
      .a(F),
      .y(y)
  );
  //F=000时的输出问题
  wire [31:0] s_0;
  and (s_0[0], 1, y[0]);
  and (s_0[1], 1, y[0]);
  and (s_0[2], 1, y[0]);
  and (s_0[3], 1, y[0]);
  and (s_0[4], 1, y[0]);
  and (s_0[5], 1, y[0]);
  and (s_0[6], 1, y[0]);
  and (s_0[7], 1, y[0]);
  and (s_0[8], 1, y[0]);
  and (s_0[9], 1, y[0]);
  and (s_0[10], 1, y[0]);
  and (s_0[11], 1, y[0]);
  and (s_0[12], 1, y[0]);
  and (s_0[13], 1, y[0]);
  and (s_0[14], 1, y[0]);
  and (s_0[15], 1, y[0]);
  and (s_0[16], 1, y[0]);
  and (s_0[17], 1, y[0]);
  and (s_0[18], 1, y[0]);
  and (s_0[19], 1, y[0]);
  and (s_0[20], 1, y[0]);
  and (s_0[21], 1, y[0]);
  and (s_0[22], 1, y[0]);
  and (s_0[23], 1, y[0]);
  and (s_0[24], 1, y[0]);
  and (s_0[25], 1, y[0]);
  and (s_0[26], 1, y[0]);
  and (s_0[27], 1, y[0]);
  and (s_0[28], 1, y[0]);
  and (s_0[29], 1, y[0]);
  and (s_0[30], 1, y[0]);
  and (s_0[31], 1, y[0]);
  ///加法模块
  wire [31:0] s1;
  wire [31:0] s_1;
  CLA_Add_32bit add1 (
      .A(a),
      .B(b),
      .CI_0(CI),
      .S(s1),
      .CO(CO)
  );
  and (s_1[0], y[1], s1[0]);
  and (s_1[1], y[1], s1[1]);
  and (s_1[2], y[1], s1[2]);
  and (s_1[3], y[1], s1[3]);
  and (s_1[4], y[1], s1[4]);
  and (s_1[5], y[1], s1[5]);
  and (s_1[6], y[1], s1[6]);
  and (s_1[7], y[1], s1[7]);
  and (s_1[8], y[1], s1[8]);
  and (s_1[9], y[1], s1[9]);
  and (s_1[10], y[1], s1[10]);
  and (s_1[11], y[1], s1[11]);
  and (s_1[12], y[1], s1[12]);
  and (s_1[13], y[1], s1[13]);
  and (s_1[14], y[1], s1[14]);
  and (s_1[15], y[1], s1[15]);
  and (s_1[16], y[1], s1[16]);
  and (s_1[17], y[1], s1[17]);
  and (s_1[18], y[1], s1[18]);
  and (s_1[19], y[1], s1[19]);
  and (s_1[20], y[1], s1[20]);
  and (s_1[21], y[1], s1[21]);
  and (s_1[22], y[1], s1[22]);
  and (s_1[23], y[1], s1[23]);
  and (s_1[24], y[1], s1[24]);
  and (s_1[25], y[1], s1[25]);
  and (s_1[26], y[1], s1[26]);
  and (s_1[27], y[1], s1[27]);
  and (s_1[28], y[1], s1[28]);
  and (s_1[29], y[1], s1[29]);
  and (s_1[30], y[1], s1[30]);
  and (s_1[31], y[1], s1[31]);

  ///移位模块
  wire [31:0] s2;
  wire [31:0] s_2;
  shifter_32bit shift1 (
      .In(a),
      .dir(dir),
      .bite(bite),
      .result(s2)
  );
  and (s_2[0], y[2], s2[0]);
  and (s_2[1], y[2], s2[1]);
  and (s_2[2], y[2], s2[2]);
  and (s_2[3], y[2], s2[3]);
  and (s_2[4], y[2], s2[4]);
  and (s_2[5], y[2], s2[5]);
  and (s_2[6], y[2], s2[6]);
  and (s_2[7], y[2], s2[7]);
  and (s_2[8], y[2], s2[8]);
  and (s_2[9], y[2], s2[9]);
  and (s_2[10], y[2], s2[10]);
  and (s_2[11], y[2], s2[11]);
  and (s_2[12], y[2], s2[12]);
  and (s_2[13], y[2], s2[13]);
  and (s_2[14], y[2], s2[14]);
  and (s_2[15], y[2], s2[15]);
  and (s_2[16], y[2], s2[16]);
  and (s_2[17], y[2], s2[17]);
  and (s_2[18], y[2], s2[18]);
  and (s_2[19], y[2], s2[19]);
  and (s_2[20], y[2], s2[20]);
  and (s_2[21], y[2], s2[21]);
  and (s_2[22], y[2], s2[22]);
  and (s_2[23], y[2], s2[23]);
  and (s_2[24], y[2], s2[24]);
  and (s_2[25], y[2], s2[25]);
  and (s_2[26], y[2], s2[26]);
  and (s_2[27], y[2], s2[27]);
  and (s_2[28], y[2], s2[28]);
  and (s_2[29], y[2], s2[29]);
  and (s_2[30], y[2], s2[30]);
  and (s_2[31], y[2], s2[31]);

  ///截取模块
  wire [31:0] s3;
  wire [31:0] s_3;
  Truncate_32bit cut1 (
      .a(a),
      .dir(dir[1]),
      .bite(bite),
      .s(s3)
  );
  and (s_3[0], y[3], s3[0]);
  and (s_3[1], y[3], s3[1]);
  and (s_3[2], y[3], s3[2]);
  and (s_3[3], y[3], s3[3]);
  and (s_3[4], y[3], s3[4]);
  and (s_3[5], y[3], s3[5]);
  and (s_3[6], y[3], s3[6]);
  and (s_3[7], y[3], s3[7]);
  and (s_3[8], y[3], s3[8]);
  and (s_3[9], y[3], s3[9]);
  and (s_3[10], y[3], s3[10]);
  and (s_3[11], y[3], s3[11]);
  and (s_3[12], y[3], s3[12]);
  and (s_3[13], y[3], s3[13]);
  and (s_3[14], y[3], s3[14]);
  and (s_3[15], y[3], s3[15]);
  and (s_3[16], y[3], s3[16]);
  and (s_3[17], y[3], s3[17]);
  and (s_3[18], y[3], s3[18]);
  and (s_3[19], y[3], s3[19]);
  and (s_3[20], y[3], s3[20]);
  and (s_3[21], y[3], s3[21]);
  and (s_3[22], y[3], s3[22]);
  and (s_3[23], y[3], s3[23]);
  and (s_3[24], y[3], s3[24]);
  and (s_3[25], y[3], s3[25]);
  and (s_3[26], y[3], s3[26]);
  and (s_3[27], y[3], s3[27]);
  and (s_3[28], y[3], s3[28]);
  and (s_3[29], y[3], s3[29]);
  and (s_3[30], y[3], s3[30]);
  and (s_3[31], y[3], s3[31]);

  ///与模块
  wire [31:0] s4;
  wire [31:0] s_4;
  And_32bit and1 (
      .a(a),
      .b(b),
      .s(s4)
  );
  and (s_4[0], y[4], s4[0]);
  and (s_4[1], y[4], s4[1]);
  and (s_4[2], y[4], s4[2]);
  and (s_4[3], y[4], s4[3]);
  and (s_4[4], y[4], s4[4]);
  and (s_4[5], y[4], s4[5]);
  and (s_4[6], y[4], s4[6]);
  and (s_4[7], y[4], s4[7]);
  and (s_4[8], y[4], s4[8]);
  and (s_4[9], y[4], s4[9]);
  and (s_4[10], y[4], s4[10]);
  and (s_4[11], y[4], s4[11]);
  and (s_4[12], y[4], s4[12]);
  and (s_4[13], y[4], s4[13]);
  and (s_4[14], y[4], s4[14]);
  and (s_4[15], y[4], s4[15]);
  and (s_4[16], y[4], s4[16]);
  and (s_4[17], y[4], s4[17]);
  and (s_4[18], y[4], s4[18]);
  and (s_4[19], y[4], s4[19]);
  and (s_4[20], y[4], s4[20]);
  and (s_4[21], y[4], s4[21]);
  and (s_4[22], y[4], s4[22]);
  and (s_4[23], y[4], s4[23]);
  and (s_4[24], y[4], s4[24]);
  and (s_4[25], y[4], s4[25]);
  and (s_4[26], y[4], s4[26]);
  and (s_4[27], y[4], s4[27]);
  and (s_4[28], y[4], s4[28]);
  and (s_4[29], y[4], s4[29]);
  and (s_4[30], y[4], s4[30]);
  and (s_4[31], y[4], s4[31]);
  ///或模块
  wire [31:0] s5;
  wire [31:0] s_5;
  Or_32bit or1 (
      .a(a),
      .b(b),
      .s(s5)
  );
  and (s_5[0], y[5], s5[0]);
  and (s_5[1], y[5], s5[1]);
  and (s_5[2], y[5], s5[2]);
  and (s_5[3], y[5], s5[3]);
  and (s_5[4], y[5], s5[4]);
  and (s_5[5], y[5], s5[5]);
  and (s_5[6], y[5], s5[6]);
  and (s_5[7], y[5], s5[7]);
  and (s_5[8], y[5], s5[8]);
  and (s_5[9], y[5], s5[9]);
  and (s_5[10], y[5], s5[10]);
  and (s_5[11], y[5], s5[11]);
  and (s_5[12], y[5], s5[12]);
  and (s_5[13], y[5], s5[13]);
  and (s_5[14], y[5], s5[14]);
  and (s_5[15], y[5], s5[15]);
  and (s_5[16], y[5], s5[16]);
  and (s_5[17], y[5], s5[17]);
  and (s_5[18], y[5], s5[18]);
  and (s_5[19], y[5], s5[19]);
  and (s_5[20], y[5], s5[20]);
  and (s_5[21], y[5], s5[21]);
  and (s_5[22], y[5], s5[22]);
  and (s_5[23], y[5], s5[23]);
  and (s_5[24], y[5], s5[24]);
  and (s_5[25], y[5], s5[25]);
  and (s_5[26], y[5], s5[26]);
  and (s_5[27], y[5], s5[27]);
  and (s_5[28], y[5], s5[28]);
  and (s_5[29], y[5], s5[29]);
  and (s_5[30], y[5], s5[30]);
  and (s_5[31], y[5], s5[31]);

  ///非模块
  wire [31:0] s6;
  wire [31:0] s_6;
  Not_32bit not1 (
      .a(a),
      .s(s6)
  );
  and (s_6[0], y[6], s6[0]);
  and (s_6[1], y[6], s6[1]);
  and (s_6[2], y[6], s6[2]);
  and (s_6[3], y[6], s6[3]);
  and (s_6[4], y[6], s6[4]);
  and (s_6[5], y[6], s6[5]);
  and (s_6[6], y[6], s6[6]);
  and (s_6[7], y[6], s6[7]);
  and (s_6[8], y[6], s6[8]);
  and (s_6[9], y[6], s6[9]);
  and (s_6[10], y[6], s6[10]);
  and (s_6[11], y[6], s6[11]);
  and (s_6[12], y[6], s6[12]);
  and (s_6[13], y[6], s6[13]);
  and (s_6[14], y[6], s6[14]);
  and (s_6[15], y[6], s6[15]);
  and (s_6[16], y[6], s6[16]);
  and (s_6[17], y[6], s6[17]);
  and (s_6[18], y[6], s6[18]);
  and (s_6[19], y[6], s6[19]);
  and (s_6[20], y[6], s6[20]);
  and (s_6[21], y[6], s6[21]);
  and (s_6[22], y[6], s6[22]);
  and (s_6[23], y[6], s6[23]);
  and (s_6[24], y[6], s6[24]);
  and (s_6[25], y[6], s6[25]);
  and (s_6[26], y[6], s6[26]);
  and (s_6[27], y[6], s6[27]);
  and (s_6[28], y[6], s6[28]);
  and (s_6[29], y[6], s6[29]);
  and (s_6[30], y[6], s6[30]);
  and (s_6[31], y[6], s6[31]);

  ///异或模块
  wire [31:0] s7;
  wire [31:0] s_7;
  Xor_32bit xor1 (
      .a(a),
      .b(b),
      .s(s7)
  );
  and (s_7[0], y[7], s7[0]);
  and (s_7[1], y[7], s7[1]);
  and (s_7[2], y[7], s7[2]);
  and (s_7[3], y[7], s7[3]);
  and (s_7[4], y[7], s7[4]);
  and (s_7[5], y[7], s7[5]);
  and (s_7[6], y[7], s7[6]);
  and (s_7[7], y[7], s7[7]);
  and (s_7[8], y[7], s7[8]);
  and (s_7[9], y[7], s7[9]);
  and (s_7[10], y[7], s7[10]);
  and (s_7[11], y[7], s7[11]);
  and (s_7[12], y[7], s7[12]);
  and (s_7[13], y[7], s7[13]);
  and (s_7[14], y[7], s7[14]);
  and (s_7[15], y[7], s7[15]);
  and (s_7[16], y[7], s7[16]);
  and (s_7[17], y[7], s7[17]);
  and (s_7[18], y[7], s7[18]);
  and (s_7[19], y[7], s7[19]);
  and (s_7[20], y[7], s7[20]);
  and (s_7[21], y[7], s7[21]);
  and (s_7[22], y[7], s7[22]);
  and (s_7[23], y[7], s7[23]);
  and (s_7[24], y[7], s7[24]);
  and (s_7[25], y[7], s7[25]);
  and (s_7[26], y[7], s7[26]);
  and (s_7[27], y[7], s7[27]);
  and (s_7[28], y[7], s7[28]);
  and (s_7[29], y[7], s7[29]);
  and (s_7[30], y[7], s7[30]);
  and (s_7[31], y[7], s7[31]);

  ///有符号比较模块
  wire signed [31:0] signed_a = a;
  wire signed [31:0] signed_b = b;
  wire [31:0] s8;
  wire [31:0] s_8;
  assign s8 = (signed_a < signed_b) ? 32'd1 : 32'd0;
  and (s_8[0], y[8], s8[0]);
  and (s_8[1], y[8], s8[1]);
  and (s_8[2], y[8], s8[2]);
  and (s_8[3], y[8], s8[3]);
  and (s_8[4], y[8], s8[4]);
  and (s_8[5], y[8], s8[5]);
  and (s_8[6], y[8], s8[6]);
  and (s_8[7], y[8], s8[7]);
  and (s_8[8], y[8], s8[8]);
  and (s_8[9], y[8], s8[9]);
  and (s_8[10], y[8], s8[10]);
  and (s_8[11], y[8], s8[11]);
  and (s_8[12], y[8], s8[12]);
  and (s_8[13], y[8], s8[13]);
  and (s_8[14], y[8], s8[14]);
  and (s_8[15], y[8], s8[15]);
  and (s_8[16], y[8], s8[16]);
  and (s_8[17], y[8], s8[17]);
  and (s_8[18], y[8], s8[18]);
  and (s_8[19], y[8], s8[19]);
  and (s_8[20], y[8], s8[20]);
  and (s_8[21], y[8], s8[21]);
  and (s_8[22], y[8], s8[22]);
  and (s_8[23], y[8], s8[23]);
  and (s_8[24], y[8], s8[24]);
  and (s_8[25], y[8], s8[25]);
  and (s_8[26], y[8], s8[26]);
  and (s_8[27], y[8], s8[27]);
  and (s_8[28], y[8], s8[28]);
  and (s_8[29], y[8], s8[29]);
  and (s_8[30], y[8], s8[30]);
  and (s_8[31], y[8], s8[31]);

  ///无符号比较模块
  wire [31:0] s9;
  wire [31:0] s_9;
  assign s9 = (a < b) ? 32'd1 : 32'd0;
  and (s_9[0], y[9], s9[0]);
  and (s_9[1], y[9], s9[1]);
  and (s_9[2], y[9], s9[2]);
  and (s_9[3], y[9], s9[3]);
  and (s_9[4], y[9], s9[4]);
  and (s_9[5], y[9], s9[5]);
  and (s_9[6], y[9], s9[6]);
  and (s_9[7], y[9], s9[7]);
  and (s_9[8], y[9], s9[8]);
  and (s_9[9], y[9], s9[9]);
  and (s_9[10], y[9], s9[10]);
  and (s_9[11], y[9], s9[11]);
  and (s_9[12], y[9], s9[12]);
  and (s_9[13], y[9], s9[13]);
  and (s_9[14], y[9], s9[14]);
  and (s_9[15], y[9], s9[15]);
  and (s_9[16], y[9], s9[16]);
  and (s_9[17], y[9], s9[17]);
  and (s_9[18], y[9], s9[18]);
  and (s_9[19], y[9], s9[19]);
  and (s_9[20], y[9], s9[20]);
  and (s_9[21], y[9], s9[21]);
  and (s_9[22], y[9], s9[22]);
  and (s_9[23], y[9], s9[23]);
  and (s_9[24], y[9], s9[24]);
  and (s_9[25], y[9], s9[25]);
  and (s_9[26], y[9], s9[26]);
  and (s_9[27], y[9], s9[27]);
  and (s_9[28], y[9], s9[28]);
  and (s_9[29], y[9], s9[29]);
  and (s_9[30], y[9], s9[30]);
  and (s_9[31], y[9], s9[31]);

  ///乘法模块
  wire [31:0] s10;
  wire [31:0] s_10;
  BoothMul_32bit booth_mul (
      .a(a),
      .b(b),
      .product(s10)
  );
  and (s_10[0], y[10], s10[0]);
  and (s_10[1], y[10], s10[1]);
  and (s_10[2], y[10], s10[2]);
  and (s_10[3], y[10], s10[3]);
  and (s_10[4], y[10], s10[4]);
  and (s_10[5], y[10], s10[5]);
  and (s_10[6], y[10], s10[6]);
  and (s_10[7], y[10], s10[7]);
  and (s_10[8], y[10], s10[8]);
  and (s_10[9], y[10], s10[9]);
  and (s_10[10], y[10], s10[10]);
  and (s_10[11], y[10], s10[11]);
  and (s_10[12], y[10], s10[12]);
  and (s_10[13], y[10], s10[13]);
  and (s_10[14], y[10], s10[14]);
  and (s_10[15], y[10], s10[15]);
  and (s_10[16], y[10], s10[16]);
  and (s_10[17], y[10], s10[17]);
  and (s_10[18], y[10], s10[18]);
  and (s_10[19], y[10], s10[19]);
  and (s_10[20], y[10], s10[20]);
  and (s_10[21], y[10], s10[21]);
  and (s_10[22], y[10], s10[22]);
  and (s_10[23], y[10], s10[23]);
  and (s_10[24], y[10], s10[24]);
  and (s_10[25], y[10], s10[25]);
  and (s_10[26], y[10], s10[26]);
  and (s_10[27], y[10], s10[27]);
  and (s_10[28], y[10], s10[28]);
  and (s_10[29], y[10], s10[29]);
  and (s_10[30], y[10], s10[30]);
  and (s_10[31], y[10], s10[31]);

  ///除法模块
  wire [31:0] s11;
  wire [31:0] s_11;
  Divider_32bit divider_inst (
      .dividend(a),
      .divisor (b),
      .quotient(s11)
  );
  and (s_11[0], y[11], s11[0]);
  and (s_11[1], y[11], s11[1]);
  and (s_11[2], y[11], s11[2]);
  and (s_11[3], y[11], s11[3]);
  and (s_11[4], y[11], s11[4]);
  and (s_11[5], y[11], s11[5]);
  and (s_11[6], y[11], s11[6]);
  and (s_11[7], y[11], s11[7]);
  and (s_11[8], y[11], s11[8]);
  and (s_11[9], y[11], s11[9]);
  and (s_11[10], y[11], s11[10]);
  and (s_11[11], y[11], s11[11]);
  and (s_11[12], y[11], s11[12]);
  and (s_11[13], y[11], s11[13]);
  and (s_11[14], y[11], s11[14]);
  and (s_11[15], y[11], s11[15]);
  and (s_11[16], y[11], s11[16]);
  and (s_11[17], y[11], s11[17]);
  and (s_11[18], y[11], s11[18]);
  and (s_11[19], y[11], s11[19]);
  and (s_11[20], y[11], s11[20]);
  and (s_11[21], y[11], s11[21]);
  and (s_11[22], y[11], s11[22]);
  and (s_11[23], y[11], s11[23]);
  and (s_11[24], y[11], s11[24]);
  and (s_11[25], y[11], s11[25]);
  and (s_11[26], y[11], s11[26]);
  and (s_11[27], y[11], s11[27]);
  and (s_11[28], y[11], s11[28]);
  and (s_11[29], y[11], s11[29]);
  and (s_11[30], y[11], s11[30]);
  and (s_11[31], y[11], s11[31]);
  
  
  // 减法模块
  wire [31:0] s12;
  wire [31:0] s_12;
  Subtractor_32bit sub1 (
      .a(a),
      .b(b),
      .result(s12)
  );
  and (s_12[0], y[12], s12[0]);
  and (s_12[1], y[12], s12[1]);
  and (s_12[2], y[12], s12[2]);
  and (s_12[3], y[12], s12[3]);
  and (s_12[4], y[12], s12[4]);
  and (s_12[5], y[12], s12[5]);
  and (s_12[6], y[12], s12[6]);
  and (s_12[7], y[12], s12[7]);
  and (s_12[8], y[12], s12[8]);
  and (s_12[9], y[12], s12[9]);
  and (s_12[10], y[12], s12[10]);
  and (s_12[11], y[12], s12[11]);
  and (s_12[12], y[12], s12[12]);
  and (s_12[13], y[12], s12[13]);
  and (s_12[14], y[12], s12[14]);
  and (s_12[15], y[12], s12[15]);
  and (s_12[16], y[12], s12[16]);
  and (s_12[17], y[12], s12[17]);
  and (s_12[18], y[12], s12[18]);
  and (s_12[19], y[12], s12[19]);
  and (s_12[20], y[12], s12[20]);
  and (s_12[21], y[12], s12[21]);
  and (s_12[22], y[12], s12[22]);
  and (s_12[23], y[12], s12[23]);
  and (s_12[24], y[12], s12[24]);
  and (s_12[25], y[12], s12[25]);
  and (s_12[26], y[12], s12[26]);
  and (s_12[27], y[12], s12[27]);
  and (s_12[28], y[12], s12[28]);
  and (s_12[29], y[12], s12[29]);
  and (s_12[30], y[12], s12[30]);
  and (s_12[31], y[12], s12[31]);

  ///输出
  or (S[0], s_0[0], s_1[0], s_2[0], s_3[0], s_4[0], s_5[0], s_6[0], s_7[0],s_8[0], s_9[0], s_10[0], s_11[0], s_12[0]);
  or (S[1], s_0[1], s_1[1], s_2[1], s_3[1], s_4[1], s_5[1], s_6[1], s_7[1],s_8[1], s_9[1], s_10[1], s_11[1], s_12[1]);
  or (S[2], s_0[2], s_1[2], s_2[2], s_3[2], s_4[2], s_5[2], s_6[2], s_7[2],s_8[2], s_9[2], s_10[2], s_11[2], s_12[2]);
  or (S[3], s_0[3], s_1[3], s_2[3], s_3[3], s_4[3], s_5[3], s_6[3], s_7[3],s_8[3], s_9[3], s_10[3], s_11[3], s_12[3]);
  or (S[4], s_0[4], s_1[4], s_2[4], s_3[4], s_4[4], s_5[4], s_6[4], s_7[4], s_8[4], s_9[4], s_10[4], s_11[4], s_12[4]);
  or (S[5], s_0[5], s_1[5], s_2[5], s_3[5], s_4[5], s_5[5], s_6[5], s_7[5], s_8[5], s_9[5], s_10[5], s_11[5], s_12[5]);
  or (S[6], s_0[6], s_1[6], s_2[6], s_3[6], s_4[6], s_5[6], s_6[6], s_7[6], s_8[6], s_9[6], s_10[6], s_11[6], s_12[6]);
  or (S[7], s_0[7], s_1[7], s_2[7], s_3[7], s_4[7], s_5[7], s_6[7], s_7[7], s_8[7], s_9[7], s_10[7], s_11[7], s_12[7]);
  or (S[8], s_0[8], s_1[8], s_2[8], s_3[8], s_4[8], s_5[8], s_6[8], s_7[8], s_8[8], s_9[8], s_10[8], s_11[8], s_12[8]);
  or (S[9], s_0[9], s_1[9], s_2[9], s_3[9], s_4[9], s_5[9], s_6[9], s_7[9], s_8[9], s_9[9], s_10[9], s_11[9], s_12[9]);
  or (S[10], s_0[10], s_1[10], s_2[10], s_3[10], s_4[10], s_5[10], s_6[10], s_7[10], s_8[10], s_9[10], s_10[10], s_11[10], s_12[10]);
  or (S[11], s_0[11], s_1[11], s_2[11], s_3[11], s_4[11], s_5[11], s_6[11], s_7[11], s_8[11], s_9[11], s_10[11], s_11[11], s_12[11]);
  or (S[12], s_0[12], s_1[12], s_2[12], s_3[12], s_4[12], s_5[12], s_6[12], s_7[12], s_8[12], s_9[12], s_10[12], s_11[12], s_12[12]);
  or (S[13], s_0[13], s_1[13], s_2[13], s_3[13], s_4[13], s_5[13], s_6[13], s_7[13], s_8[13], s_9[13], s_10[13], s_11[13], s_12[13]);
  or (S[14], s_0[14], s_1[14], s_2[14], s_3[14], s_4[14], s_5[14], s_6[14], s_7[14], s_8[14], s_9[14], s_10[14], s_11[14], s_12[14]);
  or (S[15], s_0[15], s_1[15], s_2[15], s_3[15], s_4[15], s_5[15], s_6[15], s_7[15], s_8[15], s_9[15], s_10[15], s_11[15], s_12[15]);
  or (S[16], s_0[16], s_1[16], s_2[16], s_3[16], s_4[16], s_5[16], s_6[16], s_7[16], s_8[16], s_9[16], s_10[16], s_11[16], s_12[16]);
  or (S[17], s_0[17], s_1[17], s_2[17], s_3[17], s_4[17], s_5[17], s_6[17], s_7[17], s_8[17], s_9[17], s_10[17], s_11[17], s_12[17]);
  or (S[18], s_0[18], s_1[18], s_2[18], s_3[18], s_4[18], s_5[18], s_6[18], s_7[18], s_8[18], s_9[18], s_10[18], s_11[18], s_12[18]);
  or (S[19], s_0[19], s_1[19], s_2[19], s_3[19], s_4[19], s_5[19], s_6[19], s_7[19], s_8[19], s_9[19], s_10[19], s_11[19], s_12[19]);
  or (S[20], s_0[20], s_1[20], s_2[20], s_3[20], s_4[20], s_5[20], s_6[20], s_7[20], s_8[20], s_9[20], s_10[20], s_11[20], s_12[20]);
  or (S[21], s_0[21], s_1[21], s_2[21], s_3[21], s_4[21], s_5[21], s_6[21], s_7[21], s_8[21], s_9[21], s_10[21], s_11[21], s_12[21]);
  or (S[22], s_0[22], s_1[22], s_2[22], s_3[22], s_4[22], s_5[22], s_6[22], s_7[22], s_8[22], s_9[22], s_10[22], s_11[22], s_12[22]);
  or (S[23], s_0[23], s_1[23], s_2[23], s_3[23], s_4[23], s_5[23], s_6[23], s_7[23], s_8[23], s_9[23], s_10[23], s_11[23], s_12[23]);
  or (S[24], s_0[24], s_1[24], s_2[24], s_3[24], s_4[24], s_5[24], s_6[24], s_7[24], s_8[24], s_9[24], s_10[24], s_11[24], s_12[24]);
  or (S[25], s_0[25], s_1[25], s_2[25], s_3[25], s_4[25], s_5[25], s_6[25], s_7[25], s_8[25], s_9[25], s_10[25], s_11[25], s_12[25]);
  or (S[26], s_0[26], s_1[26], s_2[26], s_3[26], s_4[26], s_5[26], s_6[26], s_7[26], s_8[26], s_9[26], s_10[26], s_11[26], s_12[26]);
  or (S[27], s_0[27], s_1[27], s_2[27], s_3[27], s_4[27], s_5[27], s_6[27], s_7[27], s_8[27], s_9[27], s_10[27], s_11[27], s_12[27]);
  or (S[28], s_0[28], s_1[28], s_2[28], s_3[28], s_4[28], s_5[28], s_6[28], s_7[28], s_8[28], s_9[28], s_10[28], s_11[28], s_12[28]);
  or (S[29], s_0[29], s_1[29], s_2[29], s_3[29], s_4[29], s_5[29], s_6[29], s_7[29], s_8[29], s_9[29], s_10[29], s_11[29], s_12[29]);
  or (S[30], s_0[30], s_1[30], s_2[30], s_3[30], s_4[30], s_5[30], s_6[30], s_7[30], s_8[30], s_9[30], s_10[30], s_11[30], s_12[30]);
  or (S[31], s_0[31], s_1[31], s_2[31], s_3[31], s_4[31], s_5[31], s_6[31], s_7[31], s_8[31], s_9[31], s_10[31], s_11[31], s_12[31]);


endmodule
